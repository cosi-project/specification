syntax = "proto3";

package cosi.resource;

option go_package = "github.com/cosi-project/runtime/api/v1alpha1";

import "v1alpha1/resource.proto";

enum EventType {
    CREATED = 0;
    UPDATED = 1;
    DESTROYED = 2;
    BOOTSTRAPPED = 3;
    ERRORED = 4;
}

// Event is emitted when resource changes.
message Event {
    Resource resource = 1;
    Resource old = 3;
    optional string error = 4;
    EventType event_type = 2;
    optional bytes bookmark = 5;
}

service State {
	// Get a resource by type and ID.
	//
	// If a resource is not found, error is returned.
	rpc Get(GetRequest) returns (GetResponse);

	// List resources by type.
	rpc List(ListRequest) returns (stream ListResponse);

	// Create a resource.
	//
	// If a resource already exists, Create returns an error.
	rpc Create(CreateRequest) returns (CreateResponse);

	// Update a resource.
	//
	// If a resource doesn't exist, error is returned.
	// On update current version of resource `new` in the state should match
	// curVersion, otherwise conflict error is returned.
	rpc Update(UpdateRequest) returns (UpdateResponse);

	// Destroy a resource.
	//
	// If a resource doesn't exist, error is returned.
	// If a resource has pending finalizers, error is returned.
	rpc Destroy(DestroyRequest) returns (DestroyResponse);

	// Watch state of a resource by (namespace, type) or a specific resource by (namespace, type, id).
	//
	// It's fine to watch for a resource which doesn't exist yet.
	// Watch is canceled when context gets canceled.
	// Watch sends initial resource state as the very first event on the channel,
	// and then sends any updates to the resource as events.
	rpc Watch(WatchRequest) returns (stream WatchResponse);
}

// Get RPC

message GetRequest {
    string namespace = 1;
    string type = 2;
    string id = 3;

    GetOptions options = 4;
}

message GetOptions {
}

message GetResponse {
    resource.Resource resource = 1;
}

// List RPC

message ListRequest {
    string namespace = 1;
    string type = 2;

    ListOptions options = 3;
}

message ListOptions {
    repeated resource.LabelQuery label_query = 1;
    resource.IDQuery id_query = 2;
}

message ListResponse {
    resource.Resource resource = 1;
}

// Create RPC

message CreateRequest {
    resource.Resource resource = 1;

    CreateOptions options = 2;
}

message CreateOptions {
    string owner = 1;
}

message CreateResponse {
    resource.Resource resource = 1;
}

// Update RPC

message UpdateRequest {
    reserved 1;
    reserved "current_version";

    resource.Resource new_resource = 2;

    UpdateOptions options = 3;
}

message UpdateOptions {
    string owner = 1;
    optional string expected_phase = 2;
}

message UpdateResponse {
    resource.Resource resource = 1;
}

// Destroy RPC

message DestroyRequest {
    string namespace = 1;
    string type = 2;
    string id = 3;

    DestroyOptions options = 4;
}

message DestroyOptions {
    string owner = 1;
}

message DestroyResponse {
}

// Watch RPC

message WatchRequest {
    string namespace = 1;
    string type = 2;
    optional string id = 3;

    WatchOptions options = 4;

    // Supported API versions:
    // 0 (not set): event types Created,Updated,Deleted
    // 1: additional event types Bootstrapped,Errored
    int32 api_version = 5;
}

message WatchOptions {
    bool bootstrap_contents = 1;
    int32 tail_events = 2;
    repeated resource.LabelQuery label_query = 3;
    resource.IDQuery id_query = 4;
    bool aggregated = 5;
    optional bytes start_from_bookmark = 6;
}

message WatchResponse {
    repeated Event event = 1;

    // Suppprted API versions:
    // 0 (not set): doesn't support watch bookmarks
    // 1: supports watch bookmarks
    int32 api_version = 2;
}
